// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: qrlwallet.proto

package qrlwallet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WalletAPI_AddNewAddress_FullMethodName                     = "/qrl.WalletAPI/AddNewAddress"
	WalletAPI_AddNewAddressWithSlaves_FullMethodName           = "/qrl.WalletAPI/AddNewAddressWithSlaves"
	WalletAPI_IsValidAddress_FullMethodName                    = "/qrl.WalletAPI/IsValidAddress"
	WalletAPI_ListAddresses_FullMethodName                     = "/qrl.WalletAPI/ListAddresses"
	WalletAPI_RemoveAddress_FullMethodName                     = "/qrl.WalletAPI/RemoveAddress"
	WalletAPI_EncryptWallet_FullMethodName                     = "/qrl.WalletAPI/EncryptWallet"
	WalletAPI_LockWallet_FullMethodName                        = "/qrl.WalletAPI/LockWallet"
	WalletAPI_UnlockWallet_FullMethodName                      = "/qrl.WalletAPI/UnlockWallet"
	WalletAPI_GetRecoverySeeds_FullMethodName                  = "/qrl.WalletAPI/GetRecoverySeeds"
	WalletAPI_GetWalletInfo_FullMethodName                     = "/qrl.WalletAPI/GetWalletInfo"
	WalletAPI_RelayTransferTxn_FullMethodName                  = "/qrl.WalletAPI/RelayTransferTxn"
	WalletAPI_RelayTransferTxnBySlave_FullMethodName           = "/qrl.WalletAPI/RelayTransferTxnBySlave"
	WalletAPI_RelayMessageTxn_FullMethodName                   = "/qrl.WalletAPI/RelayMessageTxn"
	WalletAPI_RelayMessageTxnBySlave_FullMethodName            = "/qrl.WalletAPI/RelayMessageTxnBySlave"
	WalletAPI_RelayTokenTxn_FullMethodName                     = "/qrl.WalletAPI/RelayTokenTxn"
	WalletAPI_RelayTokenTxnBySlave_FullMethodName              = "/qrl.WalletAPI/RelayTokenTxnBySlave"
	WalletAPI_RelayTransferTokenTxn_FullMethodName             = "/qrl.WalletAPI/RelayTransferTokenTxn"
	WalletAPI_RelayTransferTokenTxnBySlave_FullMethodName      = "/qrl.WalletAPI/RelayTransferTokenTxnBySlave"
	WalletAPI_RelaySlaveTxn_FullMethodName                     = "/qrl.WalletAPI/RelaySlaveTxn"
	WalletAPI_RelaySlaveTxnBySlave_FullMethodName              = "/qrl.WalletAPI/RelaySlaveTxnBySlave"
	WalletAPI_ChangePassphrase_FullMethodName                  = "/qrl.WalletAPI/ChangePassphrase"
	WalletAPI_GetTransactionsByAddress_FullMethodName          = "/qrl.WalletAPI/GetTransactionsByAddress"
	WalletAPI_GetPaginatedTransactionsByAddress_FullMethodName = "/qrl.WalletAPI/GetPaginatedTransactionsByAddress"
	WalletAPI_GetTransaction_FullMethodName                    = "/qrl.WalletAPI/GetTransaction"
	WalletAPI_GetBalance_FullMethodName                        = "/qrl.WalletAPI/GetBalance"
	WalletAPI_GetTotalBalance_FullMethodName                   = "/qrl.WalletAPI/GetTotalBalance"
	WalletAPI_GetOTS_FullMethodName                            = "/qrl.WalletAPI/GetOTS"
	WalletAPI_GetHeight_FullMethodName                         = "/qrl.WalletAPI/GetHeight"
	WalletAPI_GetBlock_FullMethodName                          = "/qrl.WalletAPI/GetBlock"
	WalletAPI_GetBlockByNumber_FullMethodName                  = "/qrl.WalletAPI/GetBlockByNumber"
	WalletAPI_GetAddressFromPK_FullMethodName                  = "/qrl.WalletAPI/GetAddressFromPK"
	WalletAPI_GetNodeInfo_FullMethodName                       = "/qrl.WalletAPI/GetNodeInfo"
)

// WalletAPIClient is the client API for WalletAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletAPIClient interface {
	AddNewAddress(ctx context.Context, in *AddNewAddressReq, opts ...grpc.CallOption) (*AddNewAddressResp, error)
	AddNewAddressWithSlaves(ctx context.Context, in *AddNewAddressWithSlavesReq, opts ...grpc.CallOption) (*AddNewAddressResp, error)
	IsValidAddress(ctx context.Context, in *ValidAddressReq, opts ...grpc.CallOption) (*ValidAddressResp, error)
	ListAddresses(ctx context.Context, in *ListAddressesReq, opts ...grpc.CallOption) (*ListAddressesResp, error)
	RemoveAddress(ctx context.Context, in *RemoveAddressReq, opts ...grpc.CallOption) (*RemoveAddressResp, error)
	EncryptWallet(ctx context.Context, in *EncryptWalletReq, opts ...grpc.CallOption) (*EncryptWalletResp, error)
	LockWallet(ctx context.Context, in *LockWalletReq, opts ...grpc.CallOption) (*LockWalletResp, error)
	UnlockWallet(ctx context.Context, in *UnlockWalletReq, opts ...grpc.CallOption) (*UnlockWalletResp, error)
	GetRecoverySeeds(ctx context.Context, in *GetRecoverySeedsReq, opts ...grpc.CallOption) (*GetRecoverySeedsResp, error)
	GetWalletInfo(ctx context.Context, in *GetWalletInfoReq, opts ...grpc.CallOption) (*GetWalletInfoResp, error)
	RelayTransferTxn(ctx context.Context, in *RelayTransferTxnReq, opts ...grpc.CallOption) (*RelayTxnResp, error)
	RelayTransferTxnBySlave(ctx context.Context, in *RelayTransferTxnBySlaveReq, opts ...grpc.CallOption) (*RelayTxnResp, error)
	RelayMessageTxn(ctx context.Context, in *RelayMessageTxnReq, opts ...grpc.CallOption) (*RelayTxnResp, error)
	RelayMessageTxnBySlave(ctx context.Context, in *RelayMessageTxnBySlaveReq, opts ...grpc.CallOption) (*RelayTxnResp, error)
	RelayTokenTxn(ctx context.Context, in *RelayTokenTxnReq, opts ...grpc.CallOption) (*RelayTxnResp, error)
	RelayTokenTxnBySlave(ctx context.Context, in *RelayTokenTxnBySlaveReq, opts ...grpc.CallOption) (*RelayTxnResp, error)
	RelayTransferTokenTxn(ctx context.Context, in *RelayTransferTokenTxnReq, opts ...grpc.CallOption) (*RelayTxnResp, error)
	RelayTransferTokenTxnBySlave(ctx context.Context, in *RelayTransferTokenTxnBySlaveReq, opts ...grpc.CallOption) (*RelayTxnResp, error)
	RelaySlaveTxn(ctx context.Context, in *RelaySlaveTxnReq, opts ...grpc.CallOption) (*RelayTxnResp, error)
	RelaySlaveTxnBySlave(ctx context.Context, in *RelaySlaveTxnBySlaveReq, opts ...grpc.CallOption) (*RelayTxnResp, error)
	ChangePassphrase(ctx context.Context, in *ChangePassphraseReq, opts ...grpc.CallOption) (*ChangePassphraseResp, error)
	GetTransactionsByAddress(ctx context.Context, in *TransactionsByAddressReq, opts ...grpc.CallOption) (*TransactionsByAddressResp, error)
	GetPaginatedTransactionsByAddress(ctx context.Context, in *PaginatedTransactionsByAddressReq, opts ...grpc.CallOption) (*PaginatedTransactionsByAddressResp, error)
	GetTransaction(ctx context.Context, in *TransactionReq, opts ...grpc.CallOption) (*TransactionResp, error)
	GetBalance(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*BalanceResp, error)
	GetTotalBalance(ctx context.Context, in *TotalBalanceReq, opts ...grpc.CallOption) (*TotalBalanceResp, error)
	GetOTS(ctx context.Context, in *OTSReq, opts ...grpc.CallOption) (*OTSResp, error)
	GetHeight(ctx context.Context, in *HeightReq, opts ...grpc.CallOption) (*HeightResp, error)
	GetBlock(ctx context.Context, in *BlockReq, opts ...grpc.CallOption) (*BlockResp, error)
	GetBlockByNumber(ctx context.Context, in *BlockByNumberReq, opts ...grpc.CallOption) (*BlockResp, error)
	GetAddressFromPK(ctx context.Context, in *AddressFromPKReq, opts ...grpc.CallOption) (*AddressFromPKResp, error)
	GetNodeInfo(ctx context.Context, in *NodeInfoReq, opts ...grpc.CallOption) (*NodeInfoResp, error)
}

type walletAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletAPIClient(cc grpc.ClientConnInterface) WalletAPIClient {
	return &walletAPIClient{cc}
}

func (c *walletAPIClient) AddNewAddress(ctx context.Context, in *AddNewAddressReq, opts ...grpc.CallOption) (*AddNewAddressResp, error) {
	out := new(AddNewAddressResp)
	err := c.cc.Invoke(ctx, WalletAPI_AddNewAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) AddNewAddressWithSlaves(ctx context.Context, in *AddNewAddressWithSlavesReq, opts ...grpc.CallOption) (*AddNewAddressResp, error) {
	out := new(AddNewAddressResp)
	err := c.cc.Invoke(ctx, WalletAPI_AddNewAddressWithSlaves_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) IsValidAddress(ctx context.Context, in *ValidAddressReq, opts ...grpc.CallOption) (*ValidAddressResp, error) {
	out := new(ValidAddressResp)
	err := c.cc.Invoke(ctx, WalletAPI_IsValidAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) ListAddresses(ctx context.Context, in *ListAddressesReq, opts ...grpc.CallOption) (*ListAddressesResp, error) {
	out := new(ListAddressesResp)
	err := c.cc.Invoke(ctx, WalletAPI_ListAddresses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) RemoveAddress(ctx context.Context, in *RemoveAddressReq, opts ...grpc.CallOption) (*RemoveAddressResp, error) {
	out := new(RemoveAddressResp)
	err := c.cc.Invoke(ctx, WalletAPI_RemoveAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) EncryptWallet(ctx context.Context, in *EncryptWalletReq, opts ...grpc.CallOption) (*EncryptWalletResp, error) {
	out := new(EncryptWalletResp)
	err := c.cc.Invoke(ctx, WalletAPI_EncryptWallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) LockWallet(ctx context.Context, in *LockWalletReq, opts ...grpc.CallOption) (*LockWalletResp, error) {
	out := new(LockWalletResp)
	err := c.cc.Invoke(ctx, WalletAPI_LockWallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) UnlockWallet(ctx context.Context, in *UnlockWalletReq, opts ...grpc.CallOption) (*UnlockWalletResp, error) {
	out := new(UnlockWalletResp)
	err := c.cc.Invoke(ctx, WalletAPI_UnlockWallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) GetRecoverySeeds(ctx context.Context, in *GetRecoverySeedsReq, opts ...grpc.CallOption) (*GetRecoverySeedsResp, error) {
	out := new(GetRecoverySeedsResp)
	err := c.cc.Invoke(ctx, WalletAPI_GetRecoverySeeds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) GetWalletInfo(ctx context.Context, in *GetWalletInfoReq, opts ...grpc.CallOption) (*GetWalletInfoResp, error) {
	out := new(GetWalletInfoResp)
	err := c.cc.Invoke(ctx, WalletAPI_GetWalletInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) RelayTransferTxn(ctx context.Context, in *RelayTransferTxnReq, opts ...grpc.CallOption) (*RelayTxnResp, error) {
	out := new(RelayTxnResp)
	err := c.cc.Invoke(ctx, WalletAPI_RelayTransferTxn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) RelayTransferTxnBySlave(ctx context.Context, in *RelayTransferTxnBySlaveReq, opts ...grpc.CallOption) (*RelayTxnResp, error) {
	out := new(RelayTxnResp)
	err := c.cc.Invoke(ctx, WalletAPI_RelayTransferTxnBySlave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) RelayMessageTxn(ctx context.Context, in *RelayMessageTxnReq, opts ...grpc.CallOption) (*RelayTxnResp, error) {
	out := new(RelayTxnResp)
	err := c.cc.Invoke(ctx, WalletAPI_RelayMessageTxn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) RelayMessageTxnBySlave(ctx context.Context, in *RelayMessageTxnBySlaveReq, opts ...grpc.CallOption) (*RelayTxnResp, error) {
	out := new(RelayTxnResp)
	err := c.cc.Invoke(ctx, WalletAPI_RelayMessageTxnBySlave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) RelayTokenTxn(ctx context.Context, in *RelayTokenTxnReq, opts ...grpc.CallOption) (*RelayTxnResp, error) {
	out := new(RelayTxnResp)
	err := c.cc.Invoke(ctx, WalletAPI_RelayTokenTxn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) RelayTokenTxnBySlave(ctx context.Context, in *RelayTokenTxnBySlaveReq, opts ...grpc.CallOption) (*RelayTxnResp, error) {
	out := new(RelayTxnResp)
	err := c.cc.Invoke(ctx, WalletAPI_RelayTokenTxnBySlave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) RelayTransferTokenTxn(ctx context.Context, in *RelayTransferTokenTxnReq, opts ...grpc.CallOption) (*RelayTxnResp, error) {
	out := new(RelayTxnResp)
	err := c.cc.Invoke(ctx, WalletAPI_RelayTransferTokenTxn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) RelayTransferTokenTxnBySlave(ctx context.Context, in *RelayTransferTokenTxnBySlaveReq, opts ...grpc.CallOption) (*RelayTxnResp, error) {
	out := new(RelayTxnResp)
	err := c.cc.Invoke(ctx, WalletAPI_RelayTransferTokenTxnBySlave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) RelaySlaveTxn(ctx context.Context, in *RelaySlaveTxnReq, opts ...grpc.CallOption) (*RelayTxnResp, error) {
	out := new(RelayTxnResp)
	err := c.cc.Invoke(ctx, WalletAPI_RelaySlaveTxn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) RelaySlaveTxnBySlave(ctx context.Context, in *RelaySlaveTxnBySlaveReq, opts ...grpc.CallOption) (*RelayTxnResp, error) {
	out := new(RelayTxnResp)
	err := c.cc.Invoke(ctx, WalletAPI_RelaySlaveTxnBySlave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) ChangePassphrase(ctx context.Context, in *ChangePassphraseReq, opts ...grpc.CallOption) (*ChangePassphraseResp, error) {
	out := new(ChangePassphraseResp)
	err := c.cc.Invoke(ctx, WalletAPI_ChangePassphrase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) GetTransactionsByAddress(ctx context.Context, in *TransactionsByAddressReq, opts ...grpc.CallOption) (*TransactionsByAddressResp, error) {
	out := new(TransactionsByAddressResp)
	err := c.cc.Invoke(ctx, WalletAPI_GetTransactionsByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) GetPaginatedTransactionsByAddress(ctx context.Context, in *PaginatedTransactionsByAddressReq, opts ...grpc.CallOption) (*PaginatedTransactionsByAddressResp, error) {
	out := new(PaginatedTransactionsByAddressResp)
	err := c.cc.Invoke(ctx, WalletAPI_GetPaginatedTransactionsByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) GetTransaction(ctx context.Context, in *TransactionReq, opts ...grpc.CallOption) (*TransactionResp, error) {
	out := new(TransactionResp)
	err := c.cc.Invoke(ctx, WalletAPI_GetTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) GetBalance(ctx context.Context, in *BalanceReq, opts ...grpc.CallOption) (*BalanceResp, error) {
	out := new(BalanceResp)
	err := c.cc.Invoke(ctx, WalletAPI_GetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) GetTotalBalance(ctx context.Context, in *TotalBalanceReq, opts ...grpc.CallOption) (*TotalBalanceResp, error) {
	out := new(TotalBalanceResp)
	err := c.cc.Invoke(ctx, WalletAPI_GetTotalBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) GetOTS(ctx context.Context, in *OTSReq, opts ...grpc.CallOption) (*OTSResp, error) {
	out := new(OTSResp)
	err := c.cc.Invoke(ctx, WalletAPI_GetOTS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) GetHeight(ctx context.Context, in *HeightReq, opts ...grpc.CallOption) (*HeightResp, error) {
	out := new(HeightResp)
	err := c.cc.Invoke(ctx, WalletAPI_GetHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) GetBlock(ctx context.Context, in *BlockReq, opts ...grpc.CallOption) (*BlockResp, error) {
	out := new(BlockResp)
	err := c.cc.Invoke(ctx, WalletAPI_GetBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) GetBlockByNumber(ctx context.Context, in *BlockByNumberReq, opts ...grpc.CallOption) (*BlockResp, error) {
	out := new(BlockResp)
	err := c.cc.Invoke(ctx, WalletAPI_GetBlockByNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) GetAddressFromPK(ctx context.Context, in *AddressFromPKReq, opts ...grpc.CallOption) (*AddressFromPKResp, error) {
	out := new(AddressFromPKResp)
	err := c.cc.Invoke(ctx, WalletAPI_GetAddressFromPK_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAPIClient) GetNodeInfo(ctx context.Context, in *NodeInfoReq, opts ...grpc.CallOption) (*NodeInfoResp, error) {
	out := new(NodeInfoResp)
	err := c.cc.Invoke(ctx, WalletAPI_GetNodeInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletAPIServer is the server API for WalletAPI service.
// All implementations must embed UnimplementedWalletAPIServer
// for forward compatibility
type WalletAPIServer interface {
	AddNewAddress(context.Context, *AddNewAddressReq) (*AddNewAddressResp, error)
	AddNewAddressWithSlaves(context.Context, *AddNewAddressWithSlavesReq) (*AddNewAddressResp, error)
	IsValidAddress(context.Context, *ValidAddressReq) (*ValidAddressResp, error)
	ListAddresses(context.Context, *ListAddressesReq) (*ListAddressesResp, error)
	RemoveAddress(context.Context, *RemoveAddressReq) (*RemoveAddressResp, error)
	EncryptWallet(context.Context, *EncryptWalletReq) (*EncryptWalletResp, error)
	LockWallet(context.Context, *LockWalletReq) (*LockWalletResp, error)
	UnlockWallet(context.Context, *UnlockWalletReq) (*UnlockWalletResp, error)
	GetRecoverySeeds(context.Context, *GetRecoverySeedsReq) (*GetRecoverySeedsResp, error)
	GetWalletInfo(context.Context, *GetWalletInfoReq) (*GetWalletInfoResp, error)
	RelayTransferTxn(context.Context, *RelayTransferTxnReq) (*RelayTxnResp, error)
	RelayTransferTxnBySlave(context.Context, *RelayTransferTxnBySlaveReq) (*RelayTxnResp, error)
	RelayMessageTxn(context.Context, *RelayMessageTxnReq) (*RelayTxnResp, error)
	RelayMessageTxnBySlave(context.Context, *RelayMessageTxnBySlaveReq) (*RelayTxnResp, error)
	RelayTokenTxn(context.Context, *RelayTokenTxnReq) (*RelayTxnResp, error)
	RelayTokenTxnBySlave(context.Context, *RelayTokenTxnBySlaveReq) (*RelayTxnResp, error)
	RelayTransferTokenTxn(context.Context, *RelayTransferTokenTxnReq) (*RelayTxnResp, error)
	RelayTransferTokenTxnBySlave(context.Context, *RelayTransferTokenTxnBySlaveReq) (*RelayTxnResp, error)
	RelaySlaveTxn(context.Context, *RelaySlaveTxnReq) (*RelayTxnResp, error)
	RelaySlaveTxnBySlave(context.Context, *RelaySlaveTxnBySlaveReq) (*RelayTxnResp, error)
	ChangePassphrase(context.Context, *ChangePassphraseReq) (*ChangePassphraseResp, error)
	GetTransactionsByAddress(context.Context, *TransactionsByAddressReq) (*TransactionsByAddressResp, error)
	GetPaginatedTransactionsByAddress(context.Context, *PaginatedTransactionsByAddressReq) (*PaginatedTransactionsByAddressResp, error)
	GetTransaction(context.Context, *TransactionReq) (*TransactionResp, error)
	GetBalance(context.Context, *BalanceReq) (*BalanceResp, error)
	GetTotalBalance(context.Context, *TotalBalanceReq) (*TotalBalanceResp, error)
	GetOTS(context.Context, *OTSReq) (*OTSResp, error)
	GetHeight(context.Context, *HeightReq) (*HeightResp, error)
	GetBlock(context.Context, *BlockReq) (*BlockResp, error)
	GetBlockByNumber(context.Context, *BlockByNumberReq) (*BlockResp, error)
	GetAddressFromPK(context.Context, *AddressFromPKReq) (*AddressFromPKResp, error)
	GetNodeInfo(context.Context, *NodeInfoReq) (*NodeInfoResp, error)
	mustEmbedUnimplementedWalletAPIServer()
}

// UnimplementedWalletAPIServer must be embedded to have forward compatible implementations.
type UnimplementedWalletAPIServer struct {
}

func (UnimplementedWalletAPIServer) AddNewAddress(context.Context, *AddNewAddressReq) (*AddNewAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewAddress not implemented")
}
func (UnimplementedWalletAPIServer) AddNewAddressWithSlaves(context.Context, *AddNewAddressWithSlavesReq) (*AddNewAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewAddressWithSlaves not implemented")
}
func (UnimplementedWalletAPIServer) IsValidAddress(context.Context, *ValidAddressReq) (*ValidAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsValidAddress not implemented")
}
func (UnimplementedWalletAPIServer) ListAddresses(context.Context, *ListAddressesReq) (*ListAddressesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddresses not implemented")
}
func (UnimplementedWalletAPIServer) RemoveAddress(context.Context, *RemoveAddressReq) (*RemoveAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAddress not implemented")
}
func (UnimplementedWalletAPIServer) EncryptWallet(context.Context, *EncryptWalletReq) (*EncryptWalletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptWallet not implemented")
}
func (UnimplementedWalletAPIServer) LockWallet(context.Context, *LockWalletReq) (*LockWalletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockWallet not implemented")
}
func (UnimplementedWalletAPIServer) UnlockWallet(context.Context, *UnlockWalletReq) (*UnlockWalletResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockWallet not implemented")
}
func (UnimplementedWalletAPIServer) GetRecoverySeeds(context.Context, *GetRecoverySeedsReq) (*GetRecoverySeedsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecoverySeeds not implemented")
}
func (UnimplementedWalletAPIServer) GetWalletInfo(context.Context, *GetWalletInfoReq) (*GetWalletInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletInfo not implemented")
}
func (UnimplementedWalletAPIServer) RelayTransferTxn(context.Context, *RelayTransferTxnReq) (*RelayTxnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayTransferTxn not implemented")
}
func (UnimplementedWalletAPIServer) RelayTransferTxnBySlave(context.Context, *RelayTransferTxnBySlaveReq) (*RelayTxnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayTransferTxnBySlave not implemented")
}
func (UnimplementedWalletAPIServer) RelayMessageTxn(context.Context, *RelayMessageTxnReq) (*RelayTxnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayMessageTxn not implemented")
}
func (UnimplementedWalletAPIServer) RelayMessageTxnBySlave(context.Context, *RelayMessageTxnBySlaveReq) (*RelayTxnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayMessageTxnBySlave not implemented")
}
func (UnimplementedWalletAPIServer) RelayTokenTxn(context.Context, *RelayTokenTxnReq) (*RelayTxnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayTokenTxn not implemented")
}
func (UnimplementedWalletAPIServer) RelayTokenTxnBySlave(context.Context, *RelayTokenTxnBySlaveReq) (*RelayTxnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayTokenTxnBySlave not implemented")
}
func (UnimplementedWalletAPIServer) RelayTransferTokenTxn(context.Context, *RelayTransferTokenTxnReq) (*RelayTxnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayTransferTokenTxn not implemented")
}
func (UnimplementedWalletAPIServer) RelayTransferTokenTxnBySlave(context.Context, *RelayTransferTokenTxnBySlaveReq) (*RelayTxnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayTransferTokenTxnBySlave not implemented")
}
func (UnimplementedWalletAPIServer) RelaySlaveTxn(context.Context, *RelaySlaveTxnReq) (*RelayTxnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelaySlaveTxn not implemented")
}
func (UnimplementedWalletAPIServer) RelaySlaveTxnBySlave(context.Context, *RelaySlaveTxnBySlaveReq) (*RelayTxnResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelaySlaveTxnBySlave not implemented")
}
func (UnimplementedWalletAPIServer) ChangePassphrase(context.Context, *ChangePassphraseReq) (*ChangePassphraseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassphrase not implemented")
}
func (UnimplementedWalletAPIServer) GetTransactionsByAddress(context.Context, *TransactionsByAddressReq) (*TransactionsByAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsByAddress not implemented")
}
func (UnimplementedWalletAPIServer) GetPaginatedTransactionsByAddress(context.Context, *PaginatedTransactionsByAddressReq) (*PaginatedTransactionsByAddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaginatedTransactionsByAddress not implemented")
}
func (UnimplementedWalletAPIServer) GetTransaction(context.Context, *TransactionReq) (*TransactionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedWalletAPIServer) GetBalance(context.Context, *BalanceReq) (*BalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedWalletAPIServer) GetTotalBalance(context.Context, *TotalBalanceReq) (*TotalBalanceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalBalance not implemented")
}
func (UnimplementedWalletAPIServer) GetOTS(context.Context, *OTSReq) (*OTSResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOTS not implemented")
}
func (UnimplementedWalletAPIServer) GetHeight(context.Context, *HeightReq) (*HeightResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeight not implemented")
}
func (UnimplementedWalletAPIServer) GetBlock(context.Context, *BlockReq) (*BlockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedWalletAPIServer) GetBlockByNumber(context.Context, *BlockByNumberReq) (*BlockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByNumber not implemented")
}
func (UnimplementedWalletAPIServer) GetAddressFromPK(context.Context, *AddressFromPKReq) (*AddressFromPKResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressFromPK not implemented")
}
func (UnimplementedWalletAPIServer) GetNodeInfo(context.Context, *NodeInfoReq) (*NodeInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInfo not implemented")
}
func (UnimplementedWalletAPIServer) mustEmbedUnimplementedWalletAPIServer() {}

// UnsafeWalletAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletAPIServer will
// result in compilation errors.
type UnsafeWalletAPIServer interface {
	mustEmbedUnimplementedWalletAPIServer()
}

func RegisterWalletAPIServer(s grpc.ServiceRegistrar, srv WalletAPIServer) {
	s.RegisterService(&WalletAPI_ServiceDesc, srv)
}

func _WalletAPI_AddNewAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).AddNewAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_AddNewAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).AddNewAddress(ctx, req.(*AddNewAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_AddNewAddressWithSlaves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewAddressWithSlavesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).AddNewAddressWithSlaves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_AddNewAddressWithSlaves_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).AddNewAddressWithSlaves(ctx, req.(*AddNewAddressWithSlavesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_IsValidAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).IsValidAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_IsValidAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).IsValidAddress(ctx, req.(*ValidAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_ListAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddressesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).ListAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_ListAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).ListAddresses(ctx, req.(*ListAddressesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_RemoveAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).RemoveAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_RemoveAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).RemoveAddress(ctx, req.(*RemoveAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_EncryptWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).EncryptWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_EncryptWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).EncryptWallet(ctx, req.(*EncryptWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_LockWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).LockWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_LockWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).LockWallet(ctx, req.(*LockWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_UnlockWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockWalletReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).UnlockWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_UnlockWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).UnlockWallet(ctx, req.(*UnlockWalletReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_GetRecoverySeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecoverySeedsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).GetRecoverySeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_GetRecoverySeeds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).GetRecoverySeeds(ctx, req.(*GetRecoverySeedsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_GetWalletInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).GetWalletInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_GetWalletInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).GetWalletInfo(ctx, req.(*GetWalletInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_RelayTransferTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayTransferTxnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).RelayTransferTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_RelayTransferTxn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).RelayTransferTxn(ctx, req.(*RelayTransferTxnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_RelayTransferTxnBySlave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayTransferTxnBySlaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).RelayTransferTxnBySlave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_RelayTransferTxnBySlave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).RelayTransferTxnBySlave(ctx, req.(*RelayTransferTxnBySlaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_RelayMessageTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayMessageTxnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).RelayMessageTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_RelayMessageTxn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).RelayMessageTxn(ctx, req.(*RelayMessageTxnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_RelayMessageTxnBySlave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayMessageTxnBySlaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).RelayMessageTxnBySlave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_RelayMessageTxnBySlave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).RelayMessageTxnBySlave(ctx, req.(*RelayMessageTxnBySlaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_RelayTokenTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayTokenTxnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).RelayTokenTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_RelayTokenTxn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).RelayTokenTxn(ctx, req.(*RelayTokenTxnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_RelayTokenTxnBySlave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayTokenTxnBySlaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).RelayTokenTxnBySlave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_RelayTokenTxnBySlave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).RelayTokenTxnBySlave(ctx, req.(*RelayTokenTxnBySlaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_RelayTransferTokenTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayTransferTokenTxnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).RelayTransferTokenTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_RelayTransferTokenTxn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).RelayTransferTokenTxn(ctx, req.(*RelayTransferTokenTxnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_RelayTransferTokenTxnBySlave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayTransferTokenTxnBySlaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).RelayTransferTokenTxnBySlave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_RelayTransferTokenTxnBySlave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).RelayTransferTokenTxnBySlave(ctx, req.(*RelayTransferTokenTxnBySlaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_RelaySlaveTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelaySlaveTxnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).RelaySlaveTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_RelaySlaveTxn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).RelaySlaveTxn(ctx, req.(*RelaySlaveTxnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_RelaySlaveTxnBySlave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelaySlaveTxnBySlaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).RelaySlaveTxnBySlave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_RelaySlaveTxnBySlave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).RelaySlaveTxnBySlave(ctx, req.(*RelaySlaveTxnBySlaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_ChangePassphrase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePassphraseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).ChangePassphrase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_ChangePassphrase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).ChangePassphrase(ctx, req.(*ChangePassphraseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_GetTransactionsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionsByAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).GetTransactionsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_GetTransactionsByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).GetTransactionsByAddress(ctx, req.(*TransactionsByAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_GetPaginatedTransactionsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginatedTransactionsByAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).GetPaginatedTransactionsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_GetPaginatedTransactionsByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).GetPaginatedTransactionsByAddress(ctx, req.(*PaginatedTransactionsByAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_GetTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).GetTransaction(ctx, req.(*TransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).GetBalance(ctx, req.(*BalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_GetTotalBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalBalanceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).GetTotalBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_GetTotalBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).GetTotalBalance(ctx, req.(*TotalBalanceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_GetOTS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).GetOTS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_GetOTS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).GetOTS(ctx, req.(*OTSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_GetHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeightReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).GetHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_GetHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).GetHeight(ctx, req.(*HeightReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_GetBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).GetBlock(ctx, req.(*BlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_GetBlockByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockByNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).GetBlockByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_GetBlockByNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).GetBlockByNumber(ctx, req.(*BlockByNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_GetAddressFromPK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressFromPKReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).GetAddressFromPK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_GetAddressFromPK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).GetAddressFromPK(ctx, req.(*AddressFromPKReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAPI_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAPIServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAPI_GetNodeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAPIServer).GetNodeInfo(ctx, req.(*NodeInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletAPI_ServiceDesc is the grpc.ServiceDesc for WalletAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qrl.WalletAPI",
	HandlerType: (*WalletAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNewAddress",
			Handler:    _WalletAPI_AddNewAddress_Handler,
		},
		{
			MethodName: "AddNewAddressWithSlaves",
			Handler:    _WalletAPI_AddNewAddressWithSlaves_Handler,
		},
		{
			MethodName: "IsValidAddress",
			Handler:    _WalletAPI_IsValidAddress_Handler,
		},
		{
			MethodName: "ListAddresses",
			Handler:    _WalletAPI_ListAddresses_Handler,
		},
		{
			MethodName: "RemoveAddress",
			Handler:    _WalletAPI_RemoveAddress_Handler,
		},
		{
			MethodName: "EncryptWallet",
			Handler:    _WalletAPI_EncryptWallet_Handler,
		},
		{
			MethodName: "LockWallet",
			Handler:    _WalletAPI_LockWallet_Handler,
		},
		{
			MethodName: "UnlockWallet",
			Handler:    _WalletAPI_UnlockWallet_Handler,
		},
		{
			MethodName: "GetRecoverySeeds",
			Handler:    _WalletAPI_GetRecoverySeeds_Handler,
		},
		{
			MethodName: "GetWalletInfo",
			Handler:    _WalletAPI_GetWalletInfo_Handler,
		},
		{
			MethodName: "RelayTransferTxn",
			Handler:    _WalletAPI_RelayTransferTxn_Handler,
		},
		{
			MethodName: "RelayTransferTxnBySlave",
			Handler:    _WalletAPI_RelayTransferTxnBySlave_Handler,
		},
		{
			MethodName: "RelayMessageTxn",
			Handler:    _WalletAPI_RelayMessageTxn_Handler,
		},
		{
			MethodName: "RelayMessageTxnBySlave",
			Handler:    _WalletAPI_RelayMessageTxnBySlave_Handler,
		},
		{
			MethodName: "RelayTokenTxn",
			Handler:    _WalletAPI_RelayTokenTxn_Handler,
		},
		{
			MethodName: "RelayTokenTxnBySlave",
			Handler:    _WalletAPI_RelayTokenTxnBySlave_Handler,
		},
		{
			MethodName: "RelayTransferTokenTxn",
			Handler:    _WalletAPI_RelayTransferTokenTxn_Handler,
		},
		{
			MethodName: "RelayTransferTokenTxnBySlave",
			Handler:    _WalletAPI_RelayTransferTokenTxnBySlave_Handler,
		},
		{
			MethodName: "RelaySlaveTxn",
			Handler:    _WalletAPI_RelaySlaveTxn_Handler,
		},
		{
			MethodName: "RelaySlaveTxnBySlave",
			Handler:    _WalletAPI_RelaySlaveTxnBySlave_Handler,
		},
		{
			MethodName: "ChangePassphrase",
			Handler:    _WalletAPI_ChangePassphrase_Handler,
		},
		{
			MethodName: "GetTransactionsByAddress",
			Handler:    _WalletAPI_GetTransactionsByAddress_Handler,
		},
		{
			MethodName: "GetPaginatedTransactionsByAddress",
			Handler:    _WalletAPI_GetPaginatedTransactionsByAddress_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _WalletAPI_GetTransaction_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _WalletAPI_GetBalance_Handler,
		},
		{
			MethodName: "GetTotalBalance",
			Handler:    _WalletAPI_GetTotalBalance_Handler,
		},
		{
			MethodName: "GetOTS",
			Handler:    _WalletAPI_GetOTS_Handler,
		},
		{
			MethodName: "GetHeight",
			Handler:    _WalletAPI_GetHeight_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _WalletAPI_GetBlock_Handler,
		},
		{
			MethodName: "GetBlockByNumber",
			Handler:    _WalletAPI_GetBlockByNumber_Handler,
		},
		{
			MethodName: "GetAddressFromPK",
			Handler:    _WalletAPI_GetAddressFromPK_Handler,
		},
		{
			MethodName: "GetNodeInfo",
			Handler:    _WalletAPI_GetNodeInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qrlwallet.proto",
}
